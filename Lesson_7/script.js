// const arr = [3, 10];

// /**
//  * Test callback
//  * @param {*} arr array with same value
//  * @param {*} callback function add and logger
//  */
// function foo(arr, callback) {
//     const first = arr[0];
//     const second = arr[1];
//     const result = callback(first, second);
//     console.log(callback);
//     console.log(result);
// }


// foo(arr, add)
// foo(arr, logger)


// function add(a, b) {
//     return a + b
// }

// function logger(a,b){
//     alert(`–§—É–Ω–∫—Ü—ñ—è –ª–æ–≥–≥–µ—Ä ${a}`)
//     alert(`–§—É–Ω–∫—Ü—ñ—è –ª–æ–≥–≥–µ—Ä ${b}`)
// }



// Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ ID, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —è–∫ id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// let i = 0

// function createProduct(partialProduct, callback) {
//     i += 1
//     const obj = {
//         id: i,
//         ...partialProduct
//     }
//     callback(obj)
// }

// function logProduct(product) {
//     console.log(product);
// }

// function logTotalPrice({price, quantity}) {
//     console.log(price * quantity);
//     return price * quantity

// }
// createProduct({name: 'üçã',price: 20,quantity: 5}, logTotalPrice);
// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3
// }, logProduct);








// Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É account  –º–µ—Ç–æ–¥–∏ –∑–∑–∞–ø–∏—Å–æ–º
// withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError) –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
// –ú–µ—Ç–æ–¥ deposit  –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —Ç–∞ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// const TRANSACTION_LIMIT = 1000;

// const account = {
//     username: 'Jacob',
//     balance: 400,
//     withdraw(amount, onSuccess, onError) {
//         if (amount > this.balance) {
//             onError('–ú–∞–ª–æ –∫–æ—à—Ç—ñ–≤')
//         } else if (amount > TRANSACTION_LIMIT) {
//             onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω–æ –ª—ñ–º—ñ—Ç')
//         } else {
//             this.balance -= amount
//             onSuccess(`–°–ø–∏—Å–∞–Ω–æ ${amount}, –∑–∞–ª–∏—à–æ–∫ ${this.balance} `)
//         }
//     },
//     deposit(amount, onSuccess, onError) {
//         if (amount <= 0) {
//             onError('–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è');
//         } else if (amount > TRANSACTION_LIMIT) {
//             onError('–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω–æ –ª—ñ–º—ñ—Ç');
//         } else {
//             this.balance += amount
//             onSuccess(`–ö–æ—à—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ ${this.balance}`)
//         }

//     }
// };

// function handleSuccess(message) {
//     console.log(`‚úÖ Success! ${message}`);
// }

// function handleError(message) {
//     console.log(`‚ùå Error! ${message}`);
// }
// account.withdraw(400, handleSuccess, handleError);
// account.withdraw(400, handleSuccess, handleError);
// account.withdraw(6000, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);




// –ü–ï–†–ï–†–í–ê –î–û 20:55






// Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–±–µ–∫–∞.

// function each(array, callback) {
//     for (const element of array) {
//         console.log(callback(element));
//     }
// }


// each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
// })

// console.log(
// each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
// })
// );
// console.log(
//     each([64, 49, 36, 25, 16], function (value) {
//         return Math.sqrt(value);
//     })
// // );
// console.log(
// each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
// })
// );
// console.log(
// each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
// })
// );





// foo()
// function foo(value) {
//     return value * 2;
// }

// const boo = function (value) {
//     return value * 2;
// }
// boo()


// const boo = ({name}) => {

// }

// boo({name : 'User'})


// const boo = value => value * 12;
// boo(4)


// const boo = (...args) => {
//     console.log(args);
//     // value * 12
// };
// boo(4, 1, 2, 3, 6)








// const createProduct = (partialProduct, callback) => partialProduct = {id: Date.now(),...partialProduct};




// const createProduct = (partialProduct, callback) => {
//     return {
//         id: Date.now(),
//         ...partialProduct
//     }
// };















// Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// function createProduct(partialProduct, callback) {
//     const product = {
//         id: Date.now(),
//         ...partialProduct
//     };
//     callback(product);
// }


// const createProduct = (partialProduct, callback) => {
//     const product = {
//         id: Date.now(),
//         ...partialProduct
//     };
//     callback(product);
// }


// const logProduct = product => console.log(product);


// const logTotalPrice = product => console.log(product.price * product.quantity);


// createProduct({
//     name: 'üçé',
//     price: 30,
//     quantity: 3
// }, logProduct);

// createProduct({
//     name: 'üçã',
//     price: 20,
//     quantity: 5
// }, logTotalPrice);








// Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// const each = (array, callback) => {
//     const newArr = [];
//     for (const el of array) {
//         newArr.push(callback(el));
//     }
//     return newArr;
// }

// // console.log(each([64, 49, 36, 25, 16], value => value * 2));

// console.log(
//     each([64, 49, 36, 25, 16], value => value - 10));
// console.log(
//     each([64, 49, 36, 25, 16], value => Math.sqrt(value)));
// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.ceil(value);
//     }),
// );
// console.log(
//     each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//         return Math.floor(value);
//     }),
// );





// Example 6 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// const logItems = items =>  items.forEach((item, idx) => console.log(`${idx + 1} - ${item}`))
// console.log(items);
// items.forEach((item, idx, arr) => console.log(`${idx + 1} - ${item}`))
// for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1} - ${items[i]}`);
// }


// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);








// Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// const printContactsInfo = ({ names, phones }) => {
//     const nameList = names.split(',');
//     const phoneList = phones.split(',');
//     // for (let i = 0; i < nameList.length , i < phoneList.length; i+=1) {
//     //   console.log(`${nameList[i]}: ${phoneList[i]}`);
//     // }
//     nameList.forEach((el, idx)=>{
//         console.log(`${el} - ${phoneList[idx]}`);
//     })
//   } 

//   printContactsInfo({
//     names: 'Jacob,William,Solomon,Artem',
//     phones: '89001234567,89001112233,890055566377',
//   });




// Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ forEach —ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// const cal—ÅulateAverage = (...args) => {

//     let total = 0;
//     // for (let i = 0; i < args.length; i++) {
//     //   total += args[i];
//     // }
//     console.log(args);
//     args.forEach(el => total += el)
//     return total / args.length;
// }

// console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
// console.log(cal—ÅulateAverage(14, 8, 2)); // 8
// console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2

// const numbers = [1, 2, 3, 4, 5];
// const filteredNumbers = numbers.filter(value => value > 3);
// console.log(filteredNumbers); // [4, 5]



// const atTheOldToad = {
//     potions: [{
//             name: "Speed potion",
//             price: 460
//         },
//         {
//             name: "Dragon breath",
//             price: 780
//         },
//         {
//             name: "Stone skin",
//             price: 520
//         },
//     ],
//     // Change code below this line
//     getPotions() {
//         return this.potions;
//     },
//     addPotion(newPotion) {
//         for (const potion of this.potions) {
//             if (potion.name === newPotion.name) {
//                 return `Error! Potion ${newPotion.name} is already in your inventory!`;
//             }
//         }
//         this.potions.push(newPotion)
//         return this.potions
//     },
//     removePotion(potionName) {
//         // const potionIndex = this.potions.indexOf(potionName);

//         // if (potionIndex === -1) {
//         //     return `Potion ${potionName} is not in inventory!`;
//         // }

//         // this.potions.splice(potionIndex, 1);
//         // for (let i = 0; i < this.potions.length; i += 1) {
//         //     if (this.potions[i].name === potionName) {
//         //         this.potions.splice(i, 1);
//         //         return;
//         //     }
//         // }
//         // return `Potion ${potionName} is not in inventory!`
//         this.potions.forEach((el, idx) => {
//             if (el.name === potionName) {
//                 this.potions.splice(idx, 1)
//                 return;
//             }
//         })
//     },
//     updatePotionName(oldName, newName) {
//         // const potionIndex = this.potions.indexOf(oldName);

//         // if (potionIndex === -1) {
//         //     return `Potion ${oldName} is not in inventory!`;
//         // }

//         // this.potions.splice(potionIndex, 1, newName);
//         // for (const el of this.potions) {
//         //     if (el.name === oldName) {
//         //         el.name = newName
//         //         return;
//         //     }
//         }

//         // this.potions.forEach((el) => {
//         //     if (el.name === oldName) {
//         //         el.name = newName
//         //         return;
//         //     }
//         // })

//     },
//     // Change code above this line
// // };
// // console.log(
// //     atTheOldToad.getPotions());
// // console.log(atTheOldToad.addPotion({
// //     name: "Invisibility",
// //     price: 620
// // }));
// // console.log(atTheOldToad.addPotion({
// //     name: "Power potion",
// //     price: 270
// // }));
// atTheOldToad.removePotion("Dragon breath")
// atTheOldToad.removePotion("Speed potion")
// atTheOldToad.updatePotionName("Dragon breath", "Polymorth")
// atTheOldToad.updatePotionName("Stone skin", "Invulnerability potion")


const numbers = [1, 2, 3, 4, 5];
const filteredNumbers = numbers.filter(value => value > 5);
console.log(filteredNumbers); // [4, 5]








const decrButton = document.querySelector(`[data-action='decrement']`);
const incrButton = document.querySelector(`[data-action='increment']`);
const value = document.querySelector("#value");
let counterValue = 0;



decrButton.addEventListener("click", onClickDecrement);

function onClickDecrement() {
    counterValue -= 1
    value.textContent = counterValue;
}

incrButton.addEventListener("click", onClickIncrement);

function onClickIncrement() {
    counterValue += 1
    value.textContent = counterValue;
}